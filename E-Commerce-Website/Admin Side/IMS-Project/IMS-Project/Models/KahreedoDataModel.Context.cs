

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace IMS_Project.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;


public partial class KahreedoEntities : DbContext
{
    public KahreedoEntities()
        : base("name=KahreedoEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public DbSet<admin_Employee> admin_Employee { get; set; }

    public DbSet<admin_Login> admin_Login { get; set; }

    public DbSet<Category> Categories { get; set; }

    public DbSet<CustomerGoodReceiptNote> CustomerGoodReceiptNotes { get; set; }

    public DbSet<CustomerQoutation> CustomerQoutations { get; set; }

    public DbSet<CustomerRequestforQoutation> CustomerRequestforQoutations { get; set; }

    public DbSet<Customer> Customers { get; set; }

    public DbSet<genMainSlider> genMainSliders { get; set; }

    public DbSet<genPromoRight> genPromoRights { get; set; }

    public DbSet<GoodReceiptNote> GoodReceiptNotes { get; set; }

    public DbSet<Order> Orders { get; set; }

    public DbSet<OrderDetail> OrderDetails { get; set; }

    public DbSet<Payment> Payments { get; set; }

    public DbSet<PaymentType> PaymentTypes { get; set; }

    public DbSet<Product> Products { get; set; }

    public DbSet<PurchaseReturn> PurchaseReturns { get; set; }

    public DbSet<RecentlyView> RecentlyViews { get; set; }

    public DbSet<RequestforQoutation> RequestforQoutations { get; set; }

    public DbSet<Review> Reviews { get; set; }

    public DbSet<Role> Roles { get; set; }

    public DbSet<SalesReturn> SalesReturns { get; set; }

    public DbSet<ShippingDetail> ShippingDetails { get; set; }

    public DbSet<SubCategory> SubCategories { get; set; }

    public DbSet<SupplierQoutation> SupplierQoutations { get; set; }

    public DbSet<Supplier> Suppliers { get; set; }

    public DbSet<tbl_SupplierPayment> tbl_SupplierPayment { get; set; }

    public DbSet<tbl_Tax> tbl_Tax { get; set; }

    public DbSet<tbl_UnitofMeasures> tbl_UnitofMeasures { get; set; }

    public DbSet<Wishlist> Wishlists { get; set; }

    public DbSet<CustomerQuotationItem> CustomerQuotationItems { get; set; }

    public DbSet<RequestforCustomerQuotationItem> RequestforCustomerQuotationItems { get; set; }

    public DbSet<RequestforQuotationItem> RequestforQuotationItems { get; set; }


    public virtual int InsertRequestforQoutation(Nullable<int> product, Nullable<int> supplier, Nullable<int> quantity, Nullable<System.DateTime> productDate)
    {

        var productParameter = product.HasValue ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(int));


        var supplierParameter = supplier.HasValue ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(int));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRequestforQoutation", productParameter, supplierParameter, quantityParameter, productDateParameter);
    }


    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }


    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }


    public virtual int sp_upgraddiagrams()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }


    public virtual ObjectResult<ViewRequestforQoutation_Result> ViewRequestforQoutation()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewRequestforQoutation_Result>("ViewRequestforQoutation");
    }


    public virtual int InsertSupplierQoutation(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, string paymentTerm, Nullable<int> tax)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var paymentTermParameter = paymentTerm != null ?
            new ObjectParameter("PaymentTerm", paymentTerm) :
            new ObjectParameter("PaymentTerm", typeof(string));


        var taxParameter = tax.HasValue ?
            new ObjectParameter("Tax", tax) :
            new ObjectParameter("Tax", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, paymentTermParameter, taxParameter);
    }


    public virtual int InsertSupplierGoodReceipt(string reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate)
    {

        var reqQoutationIDParameter = reqQoutationID != null ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(string));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierGoodReceipt", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter);
    }


    public virtual int InsertSupplierGoodReceipt1(string reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate)
    {

        var reqQoutationIDParameter = reqQoutationID != null ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(string));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierGoodReceipt1", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter);
    }


    public virtual int InsertCustomerRequestforQoutation(Nullable<int> product, Nullable<int> customer, Nullable<int> quantity, Nullable<System.DateTime> productDate)
    {

        var productParameter = product.HasValue ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(int));


        var customerParameter = customer.HasValue ?
            new ObjectParameter("Customer", customer) :
            new ObjectParameter("Customer", typeof(int));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCustomerRequestforQoutation", productParameter, customerParameter, quantityParameter, productDateParameter);
    }


    public virtual int InsertcustomerQoutation(Nullable<int> reqQoutationID, string product, string customer, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var customerParameter = customer != null ?
            new ObjectParameter("Customer", customer) :
            new ObjectParameter("Customer", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertcustomerQoutation", reqQoutationIDParameter, productParameter, customerParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter);
    }


    public virtual int InsertRequestforQoutation1(Nullable<int> product, Nullable<int> supplier, Nullable<int> quantity, Nullable<System.DateTime> productDate)
    {

        var productParameter = product.HasValue ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(int));


        var supplierParameter = supplier.HasValue ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(int));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRequestforQoutation1", productParameter, supplierParameter, quantityParameter, productDateParameter);
    }


    public virtual int InsertRequestforQoutation2(Nullable<int> product, Nullable<int> supplier, Nullable<int> quantity, Nullable<System.DateTime> productDate)
    {

        var productParameter = product.HasValue ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(int));


        var supplierParameter = supplier.HasValue ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(int));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRequestforQoutation2", productParameter, supplierParameter, quantityParameter, productDateParameter);
    }


    public virtual int InsertRequestforQoutation3(Nullable<int> product, Nullable<int> supplier, Nullable<int> quantity, Nullable<System.DateTime> productDate)
    {

        var productParameter = product.HasValue ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(int));


        var supplierParameter = supplier.HasValue ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(int));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRequestforQoutation3", productParameter, supplierParameter, quantityParameter, productDateParameter);
    }


    public virtual int InsertCustomerRequestforQoutation1(Nullable<int> product, Nullable<int> customer, Nullable<int> quantity, Nullable<System.DateTime> productDate)
    {

        var productParameter = product.HasValue ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(int));


        var customerParameter = customer.HasValue ?
            new ObjectParameter("Customer", customer) :
            new ObjectParameter("Customer", typeof(int));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCustomerRequestforQoutation1", productParameter, customerParameter, quantityParameter, productDateParameter);
    }


    public virtual int InsertSupplierQoutation1(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, string paymentTerm, Nullable<int> tax)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var paymentTermParameter = paymentTerm != null ?
            new ObjectParameter("PaymentTerm", paymentTerm) :
            new ObjectParameter("PaymentTerm", typeof(string));


        var taxParameter = tax.HasValue ?
            new ObjectParameter("Tax", tax) :
            new ObjectParameter("Tax", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation1", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, paymentTermParameter, taxParameter);
    }


    public virtual int InsertSupplierQoutation2(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, string paymentTerm)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var paymentTermParameter = paymentTerm != null ?
            new ObjectParameter("PaymentTerm", paymentTerm) :
            new ObjectParameter("PaymentTerm", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation2", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, paymentTermParameter);
    }


    public virtual int InsertRequestforQoutation4(Nullable<int> product, Nullable<int> supplier, Nullable<int> quantity, Nullable<System.DateTime> productDate)
    {

        var productParameter = product.HasValue ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(int));


        var supplierParameter = supplier.HasValue ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(int));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRequestforQoutation4", productParameter, supplierParameter, quantityParameter, productDateParameter);
    }


    public virtual int InsertSupplierQoutation3(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<decimal> taxRate)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var taxRateParameter = taxRate.HasValue ?
            new ObjectParameter("TaxRate", taxRate) :
            new ObjectParameter("TaxRate", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation3", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateParameter);
    }


    public virtual int InsertSupplierQoutation4(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<decimal> taxRate)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var taxRateParameter = taxRate.HasValue ?
            new ObjectParameter("TaxRate", taxRate) :
            new ObjectParameter("TaxRate", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation4", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateParameter);
    }


    public virtual int InsertSupplierQoutation5(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<decimal> taxRate, Nullable<int> newTax)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var taxRateParameter = taxRate.HasValue ?
            new ObjectParameter("TaxRate", taxRate) :
            new ObjectParameter("TaxRate", typeof(decimal));


        var newTaxParameter = newTax.HasValue ?
            new ObjectParameter("NewTax", newTax) :
            new ObjectParameter("NewTax", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation5", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateParameter, newTaxParameter);
    }


    public virtual int InsertSupplierQoutation6(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<int> taxRateID)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var taxRateIDParameter = taxRateID.HasValue ?
            new ObjectParameter("TaxRateID", taxRateID) :
            new ObjectParameter("TaxRateID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation6", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateIDParameter);
    }


    public virtual int InsertSupplierQoutation7(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<decimal> taxRate, string newTax)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var taxRateParameter = taxRate.HasValue ?
            new ObjectParameter("TaxRate", taxRate) :
            new ObjectParameter("TaxRate", typeof(decimal));


        var newTaxParameter = newTax != null ?
            new ObjectParameter("NewTax", newTax) :
            new ObjectParameter("NewTax", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation7", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateParameter, newTaxParameter);
    }


    public virtual int InsertSupplierQoutation8(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<decimal> taxRate, string newTax)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var taxRateParameter = taxRate.HasValue ?
            new ObjectParameter("TaxRate", taxRate) :
            new ObjectParameter("TaxRate", typeof(decimal));


        var newTaxParameter = newTax != null ?
            new ObjectParameter("NewTax", newTax) :
            new ObjectParameter("NewTax", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation8", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateParameter, newTaxParameter);
    }


    public virtual int InsertSupplierQoutation9(Nullable<int> reqQoutationID, string product, string supplier, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<int> taxRateID, Nullable<int> paymentTerm, string conUnit)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var supplierParameter = supplier != null ?
            new ObjectParameter("Supplier", supplier) :
            new ObjectParameter("Supplier", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var taxRateIDParameter = taxRateID.HasValue ?
            new ObjectParameter("TaxRateID", taxRateID) :
            new ObjectParameter("TaxRateID", typeof(int));


        var paymentTermParameter = paymentTerm.HasValue ?
            new ObjectParameter("PaymentTerm", paymentTerm) :
            new ObjectParameter("PaymentTerm", typeof(int));


        var conUnitParameter = conUnit != null ?
            new ObjectParameter("ConUnit", conUnit) :
            new ObjectParameter("ConUnit", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplierQoutation9", reqQoutationIDParameter, productParameter, supplierParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateIDParameter, paymentTermParameter, conUnitParameter);
    }


    public virtual int InsertcustomerQoutation1(Nullable<int> reqQoutationID, string product, string customer, Nullable<int> quantityNeeded, Nullable<int> supplierQuantity, Nullable<int> unitPrice, Nullable<int> totalPrice, Nullable<System.DateTime> productDate, Nullable<int> taxRateID, Nullable<int> paymentTerm, string conUnit)
    {

        var reqQoutationIDParameter = reqQoutationID.HasValue ?
            new ObjectParameter("ReqQoutationID", reqQoutationID) :
            new ObjectParameter("ReqQoutationID", typeof(int));


        var productParameter = product != null ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(string));


        var customerParameter = customer != null ?
            new ObjectParameter("Customer", customer) :
            new ObjectParameter("Customer", typeof(string));


        var quantityNeededParameter = quantityNeeded.HasValue ?
            new ObjectParameter("QuantityNeeded", quantityNeeded) :
            new ObjectParameter("QuantityNeeded", typeof(int));


        var supplierQuantityParameter = supplierQuantity.HasValue ?
            new ObjectParameter("SupplierQuantity", supplierQuantity) :
            new ObjectParameter("SupplierQuantity", typeof(int));


        var unitPriceParameter = unitPrice.HasValue ?
            new ObjectParameter("UnitPrice", unitPrice) :
            new ObjectParameter("UnitPrice", typeof(int));


        var totalPriceParameter = totalPrice.HasValue ?
            new ObjectParameter("TotalPrice", totalPrice) :
            new ObjectParameter("TotalPrice", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        var taxRateIDParameter = taxRateID.HasValue ?
            new ObjectParameter("TaxRateID", taxRateID) :
            new ObjectParameter("TaxRateID", typeof(int));


        var paymentTermParameter = paymentTerm.HasValue ?
            new ObjectParameter("PaymentTerm", paymentTerm) :
            new ObjectParameter("PaymentTerm", typeof(int));


        var conUnitParameter = conUnit != null ?
            new ObjectParameter("ConUnit", conUnit) :
            new ObjectParameter("ConUnit", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertcustomerQoutation1", reqQoutationIDParameter, productParameter, customerParameter, quantityNeededParameter, supplierQuantityParameter, unitPriceParameter, totalPriceParameter, productDateParameter, taxRateIDParameter, paymentTermParameter, conUnitParameter);
    }


    public virtual int InsertCustomerRequestforQoutation2(Nullable<int> product, Nullable<int> customer, Nullable<int> quantity, Nullable<System.DateTime> productDate)
    {

        var productParameter = product.HasValue ?
            new ObjectParameter("Product", product) :
            new ObjectParameter("Product", typeof(int));


        var customerParameter = customer.HasValue ?
            new ObjectParameter("Customer", customer) :
            new ObjectParameter("Customer", typeof(int));


        var quantityParameter = quantity.HasValue ?
            new ObjectParameter("Quantity", quantity) :
            new ObjectParameter("Quantity", typeof(int));


        var productDateParameter = productDate.HasValue ?
            new ObjectParameter("ProductDate", productDate) :
            new ObjectParameter("ProductDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCustomerRequestforQoutation2", productParameter, customerParameter, quantityParameter, productDateParameter);
    }

}

}

